
import Useful
import Data.List
import Data.Maybe
import Control.Monad.State
import qualified Data.IntMap as M

upperN :: Int
upperN = 1000000

lengthOfChain :: Int -> State (M.IntMap (Maybe Int)) (Maybe Int)
lengthOfChain n = loc n 1
 where loc n c = do
        m <- get 
        if M.member n m then
         let res = case m M.! n of
                    Just v -> if v < 0 then Just (c - 1) else Just v
                    Nothing -> Nothing
         in do
            modify (M.insert n res)
            return res
        else do
            if n > upperN then do
                modify (M.insert n Nothing)
                return Nothing
            else do 
                let nxt = sumOfDivisors n
                modify (M.insert n (Just (-1)))
                res <- loc nxt (c + 1)
                modify (M.insert n res)
                return res

maxChain :: State (M.IntMap (Maybe Int)) Int
maxChain = do
    lens <- mapM lengthOfChain [1..upperN]
    let mx = maximum $ map fromJust $ filter isJust lens
    return mx

maxChainElems :: State (M.IntMap (Maybe Int)) [Int]
maxChainElems = do
    lens <- mapM lengthOfChain [1..upperN]
    return $ elemIndices (Just 30) lens

mce :: [Int]
mce = [5915,7523,7859,9051,9203,10327,14315,17495,17715,18097,18695,19115,19915,22743,22975,23049,23591,23611,26967,28789,30723,31381,31703,31855,32769,35425,35447,35847,38551,39825,40951,42207,42721,44109,45481,45945,47217,47615,48807,48975,49257,53715,56829,57409,59581,59707,60083,60267,61251,62757,62947,65067,65667,66311,67077,67893,69541,70845,71611,75535,77505,77575,81897,83113,83327,85437,88691,91885,94213,97945,102371,105601,107655,107701,110905,113343,113391,113653,113907,117909,118487,122041,122409,122635,124231,128243,129577,129707,131865,132553,135781,138333,139077,141201,141289,141685,143329,146419,149627,150751,151065,151867,152727,152989,155145,157203,157509,158179,161103,162899,163203,163269,164161,164809,165669,167569,168585,169387,169849,171019,175263,175549,176589,177503,177791,179263,188943,189429,192301,193633,193909,195289,195885,196369,200853,200891,202867,204699,205989,206289,206557,206851,210003,214795,215397,217683,219069,224019,224627,226681,228699,231831,238669,243759,244077,244965,245413,253821,254013,254773,259047,260281,261171,261559,264019,267795,267883,269131,274923,275443,275937,277441,278723,279291,282397,284971,285615,285777,287171,288847,290083,290235,292833,294895,295487,297447,299531,302059,302323,304923,305163,305497,306657,307329,307515,309289,312207,317277,324373,325329,325587,327759,329085,331333,335017,335323,338425,342577,343227,346825,348267,350521,350991,355941,356157,358335,358521,359451,360183,366555,370695,371659,373479,374209,375229,376735,377881,380811,381027,382005,382191,383555,383583,384289,387457,390121,390435,391437,391765,393883,395305,402823,406305,406875,408867,410011,418903,422083,423055,424825,430003,430465,431757,433273,435361,442287,444897,447417,449281,450135,452603,457627,462799,463195,466939,473661,474867,476649,482455,482737,490821,491915,491943,493405,494109,495553,497725,501823,503301,504211,507637,509673,509983,511435,514029,514257,514423,514513,521907,522337,523113,525741,526569,530239,531009,537469,541731,542491,542629,547821,547921,548677,549873,556533,561469,569937,570249,571225,576693,579829,580465,589785,591621,594813,599425,600141,603499,603775,605733,605821,608805,616449,623019,627835,629071,631377,634969,635523,637909,641865,642979,648499,655513,655743,655915,658069,658165,658657,658803,667609,669141,676845,679555,684417,685363,688287,690655,701977,704001,705957,706365,709269,711877,712803,715941,718657,718897,720285,720361,721845,721935,725209,726295,726985,733155,734877,736473,737209,741385,743085,748059,750453,752013,753609,755545,759907,760773,764005,764377,765637,768271,768573,768915,769935,771837,776401,776577,777237,777321,780237,780865,780991,785145,787771,788727,789303,790605,792591,802309,806859,807337,811731,813745,819213,819369,820017,830683,834489,841555,846105,853651,854245,855811,866541,870717,874315,878007,878395,878743,882535,887397,887587,889201,889917,901705,902451,904869,912783,925381,926709,927075,939657,940987,942685,944409,947317,949669,950163,953293,959713,976263,977481,979827,986805,988033,988213,990771]

repApply :: Int -> (a -> a) -> a -> [a]
repApply 0 _ res = [res]
repApply c f res = res : repApply (c - 1) f (f res)

main' :: Int
main' =
    let mn (a:as) = if f a then a
                    else mn as
    in mn (sort (map (+ 1) mce))
 where f n = n == last (repApply 28 sumOfDivisors n)





